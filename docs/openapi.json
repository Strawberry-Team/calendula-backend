{
  "openapi": "3.0.0",
  "info": {
    "title": "Calendula",
    "version": "1.0.0",
    "description": "TODO"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local server"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "summary": "User registration",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful registration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/auth/confirm-email/{confirm_token}": {
      "get": {
        "summary": "Confirm the user's email by token",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "confirm_token",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyRW1haWwiOiJhbm4ubmljaG9sc0BleGFtcGxlLmNvbSIsImlhdCI6MTc0MTUyODEzMCwiZXhwIjoxNzQ0MTIwMTMwfQ.bUwcOYxTHTvLix6z08xcKwidtW_Jn66dbiuVmwMqv88" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful email confirmation"
          },
          "400": {
            "description": "Invalid token"
          },
          "401": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "User login",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "User logout",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful logout"
          }
        }
      }
    },
    "/api/auth/password-reset": {
      "post": {
        "summary": "Send a password recovery email",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email", "example": "ann.nichols@example.com" }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful send an email"
          },
          "404": {
            "description": "User not found by email"
          }
        }
      }
    },
    "/api/auth/password-reset/{confirm_token}": {
      "post": {
        "summary": "Confirm password recovery by token",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "confirm_token",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyRW1haWwiOiJhbm4ubmljaG9sc0BleGFtcGxlLmNvbSIsImlhdCI6MTc0MTUyOTQxMiwiZXhwIjoxNzQ0MTIxNDEyfQ.cEUznXnO2jwG7gvii_IcXIAxZqF1kcTtUXDU6_WITzE" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": { "type": "string", "example": "NewStrongPassword123!$" },
                  "password_confirm": { "type": "string", "example": "NewStrongPassword123!$" }
                },
                "required": ["password", "password_confirm"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful password update"
          },
          "400": {
            "description": "Invalid token"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Get all users",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data":{
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/User" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user (admin only)",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful user creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/users/{user_id}": {
      "get": {
        "summary": "Retrieval of user data",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "1" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "summary": "Update user data",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "1" }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUser" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "403": {
            "description": "Access denied"
          }
        }
      },
      "delete": {
        "summary": "Delete a user (admin only)",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "1" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/users/avatar": {
      "patch": {
        "summary": "Upload a user avatar",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["profilePicture"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful upload",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        }
      }
    },
    "/api/calendars": {
      "get": {
        "summary": "Get all calendars",
        "tags": ["Calendars"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of calendars",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Calendar" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new calendar",
        "tags": ["Calendars"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendar"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful calendar creation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Calendar" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/calendars/{calendar_id}": {
      "get": {
        "summary": "Get calendar data",
        "tags": ["Calendars"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "calendar_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "1" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Calendar" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Calendar not found"
          }
        }
      },
      "patch": {
        "summary": "Update calendar data",
        "tags": ["Calendars"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "calendar_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "1" }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateCalendar" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UpdatedCalendar" }
              }
            }
          },
          "403": {
            "description": "Access denied"
          }
        }
      },
      "delete": {
        "summary": "Delete a calendar",
        "tags": ["Calendars"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "calendar_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "1" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UpdatedCalendar" }
              }
            }
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/calendars/{calendar_id}/join/": {
      "patch": {
        "summary": "Join a calendar",
        "tags": ["Calendars"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "calendar_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "1" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful join."
          },
          "400": {
            "description": "Unable to join a calendar already joined."
          },
          "403": {
            "description": "Unable to join a calendar without an invitation."
          }
        }
      }
    },
    "/api/calendars/{calendar_id}/leave/": {
      "patch": {
        "summary": "Leave a calendar",
        "tags": ["Calendars"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "calendar_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "1" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful left."
          },
          "400": {
            "description": "Unable to leave a calendar for an owner, only delete it."
          },
          "403": {
            "description": "Unable to leave a calendar not invited to."
          }
        }
      }
    },
    "/api/events": {
      "get": {
        "summary": "Get all events by user",
        "tags": ["Events"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Event" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new event",
        "tags": ["Events"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful event creation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Event" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/events/{event_id}": {
      "get": {
        "summary": "Get event data",
        "tags": ["Events"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "1" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Event" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "patch": {
        "summary": "Update event data",
        "tags": ["Events"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "1" }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateEvent" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UpdatedEvent" }
              }
            }
          },
          "403": {
            "description": "Access denied"
          }
        }
      },
      "delete": {
        "summary": "Delete an event",
        "tags": ["Events"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "1" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UpdatedEvent" }
              }
            }
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/events/{event_id}/join/": {
      "patch": {
        "summary": "Join an event",
        "tags": ["Events"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "2" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful join."
          },
          "400": {
            "description": "Unable to join an event already joined."
          },
          "403": {
            "description": "Unable to join an event without an invitation."
          }
        }
      }
    },
    "/api/events/{event_id}/leave/": {
      "patch": {
        "summary": "Leave an event",
        "tags": ["Events"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "2" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful left."
          },
          "400": {
            "description": "Unable to leave an event for an owner, only delete it."
          },
          "403": {
            "description": "Unable to leave an event not invited to."
          }
        }
      }
    },
    "/api/events/{event_id}/tentative/": {
      "patch": {
        "summary": "Tentative attendance at an event",
        "tags": ["Events"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "example": "2" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful set the status of tentative participation."
          },
          "400": {
            "description": "Unable to participate tentatively in an event for an owner, only delete it."
          },
          "403": {
            "description": "Unable to join an event not invited to."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {"type": "integer", "example": "1"},
          "fullName": { "type": "string", "example": "Ann Nichols" },
          "email": { "type": "string", "format": "email", "example": "ann.nichols@example.com" },
          "country": { "type": "string", "enum": ["Ukraine", "Finland", "Estonia"], "example": "Ukraine" }
        }
      },
      "RegisterUser": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email", "example": "ann.nichols@example.com" },
          "fullName": { "type": "string", "example": "Ann Nichols" },
          "country": { "type": "string", "enum": ["Ukraine", "Finland", "Estonia"], "example": "Ukraine" },
          "password": { "type": "string", "example": "StrongPassword123!$" },
          "password_confirm": { "type": "string", "example": "StrongPassword123!$" }
        },
        "required": ["email", "fullName", "country", "password", "password_confirm"]
      },
      "LoginUser": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email", "example": "ann.nichols@example.com" },
          "password": { "type": "string", "example": "StrongPassword123!$" }
        },
        "required": ["email", "password"]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Successful login"},
          "accessToken": { "type": "string", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NTMsImVtYWlsIjoiYW5uLm5pY2hvbHNAZXhhbXBsZS5jb20iLCJyb2xlIjoidXNlciIsImlhdCI6MTc0MTUzMDQzNywiZXhwIjoxNzQyMTM1MjM3fQ.iL1yqajPCV5G-HA3se94L_7dScSVQwYohQMVOCcsH8k" },
          "data": {
            "type": "object",
            "properties": {
              "id": { "type": "integer", "example": "1" },
              "fullName": { "type": "string", "example": "Ann Nichols" },
              "email": { "type": "string", "format": "email", "example": "ann.nichols@example.com" },
              "profilePicture": { "type": "string", "example": "default.png" },
              "country": { "type": "string", "enum": ["Ukraine", "Finland", "Estonia"], "example": "Ukraine" },
              "role": { "type": "string", "enum": [ "user", "admin" ], "example": "user" },
              "isVerified": { "type": "boolean", "example": true },
              "creationAt": { "type": "string", "format": "date-time", "example": "2025-03-08 09:05:13" }
            }
          }
        }
      },
      "CreateUser": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email", "example": "ann.nichols@example.com" },
          "fullName": { "type": "string", "example": "Ann Nichols" },
          "role": { "type": "string", "enum": ["user", "admin"], "example": "user" },
          "country": { "type": "string", "enum": ["Ukraine", "Finland", "Estonia"], "example": "Ukraine" },
          "password": { "type": "string", "example": "StrongPassword123!$" },
          "password_confirm": { "type": "string", "example": "StrongPassword123!$" }
        },
        "required": ["email", "fullName", "role", "country", "password", "password_confirm"]
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "fullName": { "type": "string", "example": "Ann Nichols" },
          "password": { "type": "string", "example": "StrongPassword123!$" },
          "password_confirm": { "type": "string", "example": "StrongPassword123!$" }
        }
      },
      "Calendar": {
        "type": "object",
        "properties": {
          "id": {"type": "integer", "example": "1"},
          "title": { "type": "string", "example": "Calendula Dev Team" },
          "description": { "type": "string", "example": "Stand-ups, retrospectives, planning sprints and product demos" },
          "type": { "type": "string", "enum": ["main", "shared", "holidays"], "example": "shared" },
          "creationByUserId": {"type": "integer", "example": "1"},
          "creationAt": { "type": "string", "format": "date-time", "example": "2025-03-08 10:05:13" },
          "creator": { "$ref": "#/components/schemas/User" },
          "participants": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CalendarUser" }
          },
          "events": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Event" }
          }
        }
      },
      "CalendarUser": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "example": "1" },
          "calendarId": { "type": "integer", "example": "15" },
          "userId": { "type": "integer", "example": "9" },
          "user": { "$ref": "#/components/schemas/User" },
          "color": {"type": "string", "example": "#F4511E" },
          "role": { "type": "string", "enum": ["owner", "member", "viewer"], "example": "owner" },
          "isConfirmed": { "type": "boolean", "example": false },
          "creationAt": { "type": "string", "format": "date-time", "example": "2025-03-08 10:05:13" }
        }
      },
      "CreateCalendar": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "example": "Calendula Dev Team" },
          "description": { "type": "string", "example": "Stand-ups, retrospectives, planning sprints and product demos" },
          "participants": {
            "type": "array",
            "items": {
              "properties": {
                "userId": {"type": "integer", "example": "2"},
                "color": { "type": "string", "example": "#F4511E" },
                "role": { "type": "string", "enum": ["owner", "member", "viewer"], "example": "member" },
                "isConfirmed": { "type": "boolean", "example": false }
              }
            }
          }
        },
        "required": ["title"]
      },
      "UpdateCalendar": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "example": "Sports activities" },
          "description": { "type": "string", "example": "Schedule of gym classes and bike rides" },
          "participants": {
            "type": "array",
            "items": {
              "properties": {
                "userId": { "type": "integer", "example": "2" },
                "color": { "type": "string", "example": "#F4511E" },
                "role": { "type": "string", "enum": ["owner", "member", "viewer"], "example": "member" },
                "isConfirmed": { "type": "boolean", "example": false }
              }
            }
          }
        },
        "required": ["title"]
      },
      "UpdatedCalendar": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {"type": "integer", "example": "1"},
              "title": { "type": "string", "example": "Sports activities" },
              "description": { "type": "string", "example": "Schedule of gym classes and bike rides" },
              "creationByUserId": {"type": "integer", "example": "1"},
              "creator": { "$ref": "#/components/schemas/User" },
              "participants": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/CalendarUser" }
              },
              "creationAt": { "type": "string", "format": "date-time", "example": "2025-03-08 10:05:13" }
            }
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {"type": "integer", "example": "1"},
          "title": { "type": "string", "example": "Database Modeling" },
          "description": { "type": "string", "example": "Discussion of requirements, business logic, clarification of team composition" },
          "category": { "type": "string", "enum": ["work", "home", "hobby"], "example": "work" },
          "type": { "type": "string", "enum": ["meeting", "reminder", "task"], "example": "meeting" },
          "startAt": { "type": "string", "format": "date-time", "example": "2023-03-09 14:00:00" },
          "endAt": { "type": "string", "format": "date-time", "example": "2023-03-09 15:00:00" },
          "creationByUserId": {"type": "integer", "example": "1"},
          "creator": { "$ref": "#/components/schemas/User" },
          "participants": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventUser" }
          },
          "creationAt": { "type": "string", "format": "date-time", "example": "2023-03-09 10:00:00" }
        }
      },
      "EventUser": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "example": "1" },
          "eventId": { "type": "integer", "example": "10" },
          "userId": { "type": "integer", "example": "2" },
          "user": { "$ref": "#/components/schemas/User" },
          "color": { "type": "string", "example": "#F4511E" },
          "attendanceStatus": { "type": "string", "enum": ["yes", "no", "maybe"], "example": "yes" },
          "creationAt": { "type": "string", "format": "date-time", "example": "2025-03-08 10:05:13" }
        }
      },
      "CreateEvent": {
        "type": "object",
        "properties": {
          "calendarId": { "type": "integer", "example": "15" },
          "title": { "type": "string", "example": "Database Modeling" },
          "description": { "type": "string", "example": "Discussion of requirements, business logic, clarification of team composition" },
          "category": { "type": "string", "enum": ["work", "home", "hobby"], "example": "work" },
          "type": { "type": "string", "enum": ["meeting", "reminder", "task"], "example": "meeting" },
          "startAt": { "type": "string", "format": "date-time", "example": "2023-03-09 14:00:00" },
          "endAt": { "type": "string", "format": "date-time", "example": "2023-03-09 15:00:00" },
          "participants": {
            "type": "array",
            "items": {
              "properties": {
                "userId": {"type": "integer", "example": "2"}
              }
            }
          }
        },
        "required": ["calendarId", "title", "category", "type", "startAt", "endAt"]
      },
      "UpdateEvent": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "example": "Frontend: Auth" },
          "description": { "type": "string", "example": "Creating user flow for authorisation" },
          "category": { "type": "string", "enum": ["work", "home", "hobby"], "example": "work" },
          "type": { "type": "string", "enum": ["meeting", "reminder", "task"], "example": "task" },
          "startAt": { "type": "string", "format": "date-time", "example": "2023-03-11 10:00:00" },
          "endAt": { "type": "string", "format": "date-time", "example": "2023-03-11 13:00:00" },
          "participants": {
            "type": "array",
            "items": {
              "properties": {
                "userId": {"type": "integer", "example": "2"}
              }
            }
          }
        },
        "required": ["title", "category", "type", "startAt", "endAt"]
      },
      "UpdatedEvent": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {"type": "integer", "example": "1"},
              "title": { "type": "string", "example": "Frontend: Auth" },
              "description": { "type": "string", "example": "Creating user flow for authorisation" },
              "category": { "type": "string", "enum": ["work", "home", "hobby"], "example": "work" },
              "type": { "type": "string", "enum": ["meeting", "reminder", "task"], "example": "task" },
              "startAt": { "type": "string", "format": "date-time", "example": "2023-03-11 10:00:00" },
              "endAt": { "type": "string", "format": "date-time", "example": "2023-03-11 13:00:00" },
              "creationByUserId": {"type": "integer", "example": "1"},
              "creator": { "$ref": "#/components/schemas/User" },
              "participants": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/EventUser" }
              },
              "creationAt": { "type": "string", "format": "date-time", "example": "2023-03-09 10:00:00" }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}